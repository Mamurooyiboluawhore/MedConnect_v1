from app import db
from diagnosis import Diagnosis

class Appointments(db.Model):
    __tablename__ = 'appointments'
    id = db.Column(db.Integer, primary_key=True)
    patient_id = db.Column(db.Integer, db.ForeignKey('patients.id'), nullable=False, index=True)
    doctor_id = db.Column(db.Integer, db.ForeignKey('doctors.id'), nullable=False, index=True)
    diagnosis = db.relationship('Diagnosis', backref='appointments', uselist=False)
    date_of_appointment = db.Column(db.Date, nullable=False)
    status = db.Column(db.String(10), nullable=False, default='Scheduled')
    notes = db.Column(db.Text, nullable=True)
    time = db.Column(db.Integer, db.ForeignKey('timeslots.id'), nullable=False)


    def __repr__(self):
        """ Defines the appointment object string representation """
        return f"Appointment('{self.id}': '{self.doctor_id}' '{self.patient_id}' '{self.status}' '{self.notes}')"


@app.route("/book_appointment", methods=["POST"])
def book_appointment():
    data = request.get_json()
    time = data.get("time")
    date = data.get("date")
    description = data.get("description")
    username = data.get("username")

    user = User.query.filter_by(username=username).first()

    if not user:
        return jsonify({"message": "User not found"})

    appointment = Appointment(
        user_id=user.id, date=date, time=time, description=description, doctor_id=1
    )
    try:
        db.session.add(appointment)
        db.session.commit()
        return jsonify({"message": "Appointment successfully booked"}), 201
    except Exception as err:
        print(str(err))
        db.session.rollback()
        return jsonify({"message": "Booking appointment failed"}), 400

@app.route("/appointment/<int>: id", methods=["POST"])
def update_appointment(appointment_id):
    pass
